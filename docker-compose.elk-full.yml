version: "3.7"

services:
    # Database
    postgres:
        container_name: postgres
        image: postgres:12.2-alpine # use official postgres version 12.2
        restart: unless-stopped
        volumes:
            - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
        environment:
            POSTGRES_USER: docker
            POSTGRES_PASSWORD: docker
            POSTGRES_DB: acm
            POSTGRES_HOST: localhost
            POSTGRES_PORT: 5432
            PGDATA: /var/lib/postgresql/data/
        ports:
            - target: 5432 # the port inside the container
              published: 35432 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together

    # Database Administration Tool
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        depends_on:
            - postgres
        environment:
            PGADMIN_DEFAULT_EMAIL: "acm@ucmerced.edu"
            PGADMIN_DEFAULT_PASSWORD: "PgAdmin2020!"
        volumes:
            - ./mocks:/pgadmin4/mocks
            - ./database.json:/pgadmin4/servers.json
        ports:
            - target: 80 # the port inside the container
              published: 8080 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together

    # Website written in Angular
    chapter-website:
        container_name: Chapter-Website
        image: chapter-website:v0.3.0
        restart: unless-stopped
        build:
            context: ./Chapter-Website
            dockerfile: Dockerfile
        depends_on:
            - half-dome
            - tuolumne
            - tenaya
        ports:
            - target: 4200 # the port inside the container
              published: 4200 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together

    # Member Management API written in Nodejs
    half-dome:
        container_name: Half-Dome
        image: half-dome:v0.2.7
        restart: unless-stopped
        build:
            context: ./Half-Dome
            dockerfile: Dockerfile
        env_file:
            - ./Half-Dome/.env
        depends_on:
            - postgres
            - pgadmin
        environment:
            POSTGRES_HOST: host.docker.internal
            POSTGRES_PORT: 35432
            POSTGRES_DB: acm
            POSTGRES_USER: docker
            POSTGRES_PASSWORD: docker
        ports:
            - target: 4201 # the port inside the container
              published: 4201 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together

    # Workshop Management API written in PHP
    tuolumne:
        container_name: Tuolumne
        image: tuolumne:v1.0
        restart: unless-stopped
        build:
            context: ./Tuolumne
            dockerfile: Dockerfile
        env_file:
            - ./Tuolumne/.env
        depends_on:
            - postgres
            - pgadmin
        environment:
            DB_HOST: host.docker.internal
            DB_PORT: 35432
            DB_DATABASE: acm
            DB_USERNAME: docker
            DB_PASSWORD: docker
        ports:
            - target: 4202 # the port inside the container
              published: 4202 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together

    # Events Management API written in Golang
    tenaya:
        container_name: Tenaya
        image: tenaya:v1.0
        restart: unless-stopped
        build:
            context: ./Tenaya
            dockerfile: Dockerfile
        env_file:
            - ./Tenaya/.env
        depends_on:
            - postgres
            - pgadmin
        environment:
            DB_HOST: host.docker.internal
            DB_PORT: 35432
            DB_DATABASE: acm
            DB_USER: docker
            DB_PASSWORD: docker
            PORT: 4203
        ports:
            - target: 4203 # the port inside the container
              published: 4203 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together

    elasticsearch:
        container_name: Elasticsearch
        build:
            context: ./elasticsearch/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - type: bind
              source: ./elasticsearch/config/elasticsearch.yml
              target: /usr/share/elasticsearch/config/elasticsearch.yml
              read_only: true
            - type: volume
              source: elasticsearch
              target: /usr/share/elasticsearch/data
        ports:
            - target: 9200 # the port inside the container
              published: 9200 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
            - target: 9300 # the port inside the container
              published: 9300 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
        environment:
            ES_JAVA_OPTS: "-Xmx256m -Xms256m"
            ELASTIC_USERNAME: root
            ELASTIC_PASSWORD: changeme
            # Use single node discovery in order to disable production mode and avoid bootstrap checks
            # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
            discovery.type: single-node
        networks:
            - elk

    logstash:
        container_name: Logstash
        build:
            context: ./logstash/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - type: bind
              source: ./logstash/config/logstash.yml
              target: /usr/share/logstash/config/logstash.yml
              read_only: true
            - type: bind
              source: ./logstash/pipeline
              target: /usr/share/logstash/pipeline
              read_only: true
        ports:
            - target: 5000 # the port inside the container
              published: 5000 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
            - target: 5000 # the port inside the container
              published: 5000 # the publicly exposed port
              protocol: udp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
            - target: 9600 # the port inside the container
              published: 9600 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - elk
        depends_on:
            - elasticsearch

    kibana:
        container_name: Kibana
        build:
            context: ./kibana/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - type: bind
              source: ./kibana/config/kibana.yml
              target: /usr/share/kibana/config/kibana.yml
              read_only: true
        ports:
            - target: 5601 # the port inside the container
              published: 5601 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
        networks:
            - elk
        depends_on:
            - elasticsearch

    apm-server:
        container_name: APM_Server
        build:
            context: ./apm-server/
            args:
                ELK_VERSION: $ELK_VERSION
        command:
            # Disable strict permission checking on 'apm-server.yml' configuration file
            # https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
            - --strict.perms=false
        volumes:
            - type: bind
              source: ./apm-server/config/apm-server.yml
              target: /usr/share/apm-server/apm-server.yml
              read_only: true
        ports:
            - target: 8200 # the port inside the container
              published: 8200 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
        networks:
            - elk
        depends_on:
            - elasticsearch

    enterprise-search:
        container_name: Enterprise_Search
        build:
            context: ./enterprise-search/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - type: bind
              source: ./enterprise-search/config/enterprise-search.yml
              target: /usr/share/enterprise-search/config/enterprise-search.yml
              read_only: true
        environment:
            JAVA_OPTS: -Xmx2g -Xms2g
            ENT_SEARCH_DEFAULT_PASSWORD: changeme
        ports:
            - target: 3002 # the port inside the container
              published: 3002 # the publicly exposed port
              protocol: tcp # the port protocol (tcp or udp)
              mode: bridge # bridge networks are used to connect multiple containers together
        networks:
            - elk
        depends_on:
            - elasticsearch

    logspout:
        container_name: Logspout
        build:
            context: ./logspout
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        environment:
            ROUTE_URIS: logstash://logstash:5000
            LOGSTASH_TAGS: docker-elk
        networks:
            - elk
        depends_on:
            - logstash
        restart: on-failure

    curator:
        container_name: Curator
        build:
            context: ./curator/
        environment:
            ELASTICSEARCH_HOST: elasticsearch
            CRON: 0 0 * * *
            CONFIG_FILE: /usr/share/curator/config/curator.yml
            COMMAND: /usr/share/curator/config/delete_log_files_curator.yml
            UNIT_COUNT: 2
        networks:
            - elk
        depends_on:
            - elasticsearch

networks:
    elk:
        driver: bridge

volumes:
    elasticsearch:
    database-data: # named volumes can be managed easier using docker-compose
